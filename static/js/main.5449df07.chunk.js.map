{"version":3,"sources":["Components/WeatherContainer.js","Components/BgVideo.js","Components/Weather.js","App.js","index.js"],"names":["WeatherContainer","props","iconAPIurl","weather","weatherIcon","error","className","style","paddingTop","color","fontWeight","opacity","textTransform","stateName","cityName","src","alt","description","Math","round","temperature","temperature_max","temperature_min","id","time","geoLocationStatus","BgVideo","autoPlay","muted","loop","playsInline","type","initialWeather","country","lon","lat","Weather","useState","city","setCity","setError","setWeather","setGeoLocationStatus","weatherAPIurl","process","getWeather","axios","get","then","responseA","Promise","all","data","coord","responseB","responseC","name","sys","main","temp","temp_max","temp_min","icon","features","properties","state","moment","tz","zoneName","format","catch","err","console","log","message","value","placeholder","onChange","e","target","faSearch","onClick","preventDefault","faLocationArrow","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","firstRes","district","secondRes","thirdRes","response","App","require","config","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5449df07.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst WeatherContainer = (props) => {\n\n    const iconAPIurl = `http://openweathermap.org/img/w/${props.weather.weatherIcon}.png`\n\n    return (\n        <div>\n            {\n          props.error ? \n        <div className='display'>\n            <h3 className=\"pleaseEnter\" style={{paddingTop: '.5rem', color: 'black', fontWeight: 'bold', opacity: '2', textTransform: 'uppercase'}}>\n            {props.error} \n            </h3>\n        </div> \n        : !props.weather.weather ? \n        <div className='display'>\n            <h2 className=\"pleaseEnter\"> {props.geoLocationStatus ? props.geoLocationStatus : 'Please enter a city name or use current location'} </h2>\n        </div>\n          : props.weather.stateName ?\n        <div className='display'>\n            <h2> {props.weather.cityName}, {props.weather.stateName} </h2>\n            <h2> {props.weather.weather} </h2>\n            <img src={iconAPIurl} alt=\"weather icon\" />\n            <h3> {props.weather.description}</h3>\n            <h4> Current Temperature: {Math.round(props.weather.temperature)}&deg; </h4>\n            <p> High: {Math.round(props.weather.temperature_max)}&deg; </p>\n            <p> Low: {Math.round(props.weather.temperature_min)}&deg; </p>\n            <p id=\"time\"> {props.weather.time} </p>\n        </div>\n        : \n        <div className='display'>\n            <h2> {props.weather.cityName} </h2>\n            <h2> {props.weather.weather} </h2>\n            <img src={iconAPIurl} alt=\"weather icon\" />\n            <h3> {props.weather.description}</h3>\n            <h4> {Math.round(props.weather.temperature)} </h4>\n            <p> High: {Math.round(props.weather.temperature_max)} </p>\n            <p> Low: {Math.round(props.weather.temperature_min)} </p>\n            <p> {props.weather.time} </p>\n        </div>\n          }\n        </div>\n    )\n}\n\nexport default WeatherContainer","import React from 'react'\n\nconst BgVideo = (props) => {\n    const {weather} = props\n    return (\n        <div className=\"videoContainer\">\n            <video autoPlay muted loop playsInline id=\"background-video\" key={weather.weather}>\n      <source src={\n  (!weather.weather ? \"./sand.mp4\" : '') ||\n  (weather.weather === \"Clouds\" && \"./clouds.mp4\") ||\n  (weather.weather === \"Thunderstorm\" && \"./thunder.mp4\") ||\n  (weather.weather === \"Clear\" && \"./clearsun.mp4\") ||\n  (weather.weather === \"Drizzle\" && \"./lightrain.mp4\") ||\n  (weather.weather === \"Rain\" && \"./heavyrain.mp4\") ||\n  (weather.weather === \"Snow\" && \"./whitesnow.mp4\") ||\n  (weather.weather === \"Atmosphere\" && \"./atmosphere.mp4\")\n            \n    } type=\"video/mp4\" />\n  </video>\n        </div>\n    )\n}\n\nexport default BgVideo\n","import React, {useState} from 'react'\nimport axios from 'axios'\nimport WeatherContainer from './WeatherContainer'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch, faLocationArrow } from '@fortawesome/free-solid-svg-icons'\nimport moment from 'moment';\nimport 'moment-timezone'\nimport BgVideo from './BgVideo'\n\nconst initialWeather = [{\n  cityName: '',\n  stateName: '',\n  country: '',\n  weather: '',\n  description: '',\n  weatherIcon: '',\n  temperature: '',\n  temperature_max: '',\n  temperature_min: '',\n  lon: '',\n  lat: '',\n  time: '',\n}]\n\nconst Weather = () => {\n\n  const [city, setCity] = useState('')\n  const [error, setError] = useState('')\n  const [weather, setWeather] = useState(initialWeather)\n  const [geoLocationStatus, setGeoLocationStatus] = useState()\n  \n  const handleChange = (e) => {\n    setCity(e.target.value);\n  }\n  \n  const handleSubmit = (e) => {\n    e.preventDefault()\n    getWeather()\n  }\n  \n  const weatherAPIurl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${process.env.REACT_APP_WEATHER_TOKEN}`\n\n  const getWeather = () => {\n    axios.get(weatherAPIurl) \n    .then((responseA) =>\n        Promise.all([\n          responseA,\n          axios.get(`https://api.geoapify.com/v1/geocode/reverse?lat=${responseA.data.coord.lat}&lon=${responseA.data.coord.lon}&apiKey=${process.env.REACT_APP_GEOCODING_TOKEN}`),\n          axios.get(`https://api.timezonedb.com/v2.1/get-time-zone?key=J4CW56V87PEA&format=json&by=position&lat=${responseA.data.coord.lat}&lng=${responseA.data.coord.lon}`),\n        ])   \n    )\n    .then(\n      ([responseA,responseB, responseC]) => {\n        setWeather({...weather, \n          cityName: responseA.data.name,\n          country: responseA.data.sys.country,\n          weather: responseA.data.weather[0].main,\n          description: responseA.data.weather[0].description,\n          temperature: responseA.data.main.temp,\n          temperature_max: responseA.data.main.temp_max,\n          temperature_min: responseA.data.main.temp_min,\n          weatherIcon: responseA.data.weather[0].icon,\n          lon: responseA.data.coord.lon,\n          lat: responseA.data.coord.lat,\n          stateName: responseB.data.features[0].properties.state,\n          time: moment().tz(`${responseC.data.zoneName}`).format('MMMM Do YYYY, h:mm a')\n        })\n        setError('')\n    })\n    .catch((err) => {\n        console.log(err.message);\n        setError('Please enter a valid City name')\n    });\n  }\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setGeoLocationStatus('Geolocation is not supported by your browser');\n    } else {\n      setGeoLocationStatus('Locating...');\n      navigator.geolocation.getCurrentPosition((position) => {\n        setGeoLocationStatus(null);\n\n        axios.get(`https://api.geoapify.com/v1/geocode/reverse?lat=${position.coords.latitude}&lon=${position.coords.longitude}&apiKey=${process.env.REACT_APP_GEOCODING_TOKEN}`) \n        .then((firstRes) =>\n            Promise.all([\n              firstRes,\n              axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${firstRes.data.features[0].properties.district}&units=imperial&appid=${process.env.REACT_APP_WEATHER_TOKEN}`),\n              axios.get(`https://api.timezonedb.com/v2.1/get-time-zone?key=J4CW56V87PEA&format=json&by=position&lat=${position.coords.latitude}&lng=${position.coords.longitude}`),\n            ])   \n        )\n        .then(\n        ([firstRes, secondRes, thirdRes]) => {\n\n          setWeather({...weather, \n            cityName: secondRes.data.name,\n            country: secondRes.data.sys.country,\n            weather: secondRes.data.weather[0].main,\n            description: secondRes.data.weather[0].description,\n            temperature: secondRes.data.main.temp,\n            temperature_max: secondRes.data.main.temp_max,\n            temperature_min: secondRes.data.main.temp_min,\n            weatherIcon: secondRes.data.weather[0].icon,\n            lon: secondRes.data.coord.lon,\n            lat: secondRes.data.coord.lat,\n            stateName: firstRes.data.features[0].properties.state,\n            time: moment().tz(`${thirdRes.data.zoneName}`).format('MMMM Do YYYY, h:mm a')\n          })\n          setError('')\n        })\n       .catch(error => {\n          console.log(error.response.data.error)\n       })\n      }, () => {\n        setGeoLocationStatus('Unable to retrieve your location');\n      });\n    }\n  }\n\n    return (\n      <div>\n\n      <div className=\"container\">\n          <form >\n            <input type=\"text\" name=\"City\" value={city} placeholder=\"Search for a city\" onChange={handleChange} />\n            <FontAwesomeIcon className=\"searchbtn\" icon={faSearch} onClick={handleSubmit}/>\n            <FontAwesomeIcon style={{color: 'blue'}} className=\"searchbtn\" icon={faLocationArrow} onClick={getLocation}/>\n          </form>\n          <WeatherContainer weather={weather} city={city} error={error} geoLocationStatus={geoLocationStatus}/>\n      </div>\n          <BgVideo weather={weather} />\n\n      </div>\n    )\n}\n\nexport default Weather","import React from 'react';\nimport './App.css'\nimport Weather from './Components/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport 'font-awesome/css/font-awesome.min.css';\n\nrequire('dotenv').config();\n\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}